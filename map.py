from settings import *  # Импорт всех переменных и констант из файла settings.py
import pygame  # Импорт библиотеки Pygame для разработки игр
from numba.core import types  # Импорт модуля types из библиотеки Numba для определения типов данных
from numba.typed import Dict  # Импорт класса Dict из библиотеки Numba для создания типизированных словарей
from numba import int32  # Импорт типа данных int32 из библиотеки Numba для указания типа целых чисел

_ = False  # Определение переменной _ как False для обозначения пустой клетки в карте

matrix_map = [  # Определение карты мира в виде двумерного списка (матрицы)
    [1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 2, 5, 6, 1, 1],
    [1, 1, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, 1, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, 1, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1, _, 1, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, _, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, _, 1, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, 1, 1, 1, _, _, _, 1, _, 1, _, _, _, _, _, _, _, _, _, 1, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, _, _, _, _, _, 1, _, _, _, _, 1, _, _, _, 1, _, _, 1, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, 1, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, 1, 1, 1, _, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, _, _, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, _, _, 1, _, 1, _, _, 1, _, _, _, _, _, _, 1, _, 1, _, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 8, 1, 1, 1],
    [1, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, 1, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, 1, _, 1, _, 1, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, 1, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, 1, _, _, _, _, _, 1, 1],
    [1, 1, 1, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, 1, 1, 1, 1, 1, _, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1],
    [1, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, _, 1, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, 1, _, _, _, _, _, 1, 1],
    [1, 1, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, 1, _, _, 1, 1, _, 1, 1],
    [1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]

WORLD_WIDTH = len(matrix_map[0]) * TILE  # Вычисление ширины игрового мира в пикселях
WORLD_HEIGHT = len(matrix_map) * TILE  # Вычисление высоты игрового мира в пикселях

world_map = Dict.empty(key_type=types.UniTuple(int32, 2), value_type=int32)  # Создание типизированного словаря для хранения информации о клетках мира
collision_walls = []  # Создание списка для хранения прямоугольников, представляющих стены для обработки коллизий

for j, row in enumerate(matrix_map):  # Перебор строк матрицы карты с получением индекса строки (j)
    for i, char in enumerate(row):  # Перебор элементов в каждой строке с получением индекса элемента (i)
        if char:  # Проверка, является ли текущий элемент карты непустым (т.е имеет какое-то значение)
            collision_walls.append(pygame.Rect(i * TILE, j * TILE, TILE, TILE))  # Создание прямоугольника для стены и добавление его в список
            if char == 1:  # Если значение элемента равно 1
                world_map[(i * TILE, j * TILE)] = 1  # Добавление информации о клетке в словарь world_map
            if char == 2: # Если значение элемента равно 2
                world_map[(i * TILE, j * TILE)] = 2 # Добавление информации о клетке в словарь world_map
            if char == 3: # Если значение элемента равно 3
                world_map[(i * TILE, j * TILE)] = 3 # Добавление информации о клетке в словарь world_map
            if char == 4: # Если значение элемента равно 4
                world_map[(i * TILE, j * TILE)] = 4 # Добавление информации о клетке в словарь world_map
            if char == 5: # Если значение элемента равнo 5
                world_map[(i * TILE, j * TILE)] = 5 # Добавление информации о клетке в словарь world_map
            if char == 6: # Если значение элемента равно 6
                world_map[(i * TILE, j * TILE)] = 6 # Добавление информации о клетке в словарь world_map
            if char == 7: # Если значение элемента равно 7
                world_map[(i * TILE, j * TILE)] = 7 # Добавление информации о клетке в словарь world_map
            if char == 8: # Если значение элемента равно 8
                world_map[(i * TILE, j * TILE)] = 8 # Добавление информации о клетке в словарь world_map